name: ".NET"
description: "Build, test, pack, and publish a .NET repository."
author: "bottlenoselabs"

inputs:
  repository:
    description: "Repository name with owner on GitHub. For example, actions/checkout."
    required: true
  ref:
    description: "The branch, tag or SHA to checkout."
    required: false
    default: ''
  solution-or-project:
    description: "The target .NET solution (.sln) or C# project (.csproj)."
    required: false
    default: ''
  dotnet-sdk-version:
    description: "The version of the .NET software development kit to use."
    required: true
  is-enabled-pack:
    description: "A boolean indicating wether to run `dotnet pack` and upload NuGet packages."
    required: true
  upload-nuget-org:
    description: "Determines wether to upload to the NuGet.org feed."
    required: true
  upload-myget-org:
    description: "Determines wether to upload to the MyGet.org feed."
    required: true
  myget-access-token:
    description: "The access token to upload NuGet packages to myget.org staging environment."
    required: true
  nuget-access-token:
    description: "The access token to upload NuGet packages to nuget.org release environment."
    required: true
  gitversion-working-directory:
    description: "GitVersion: Optionally supply the working directory."
    required: false
    default: '$(pwd)'
  gitversion-config-file-path:
    description: "GitVersion: Config file path."
    required: false
    default: 'GitVersion.yml'

runs:
  using: "composite"
  steps:

    - name: "Clone Git repository"
      uses: actions/checkout@v2
      with:
        fetch-depth: 0
        submodules: 'recursive'
        repository: '${{ inputs.repository }}'
        ref: '${{ inputs.ref }}'

    - name: "Install .NET"
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '${{ inputs.dotnet-sdk-version }}'
        include-prerelease: true

    - name: "Install GitVersion"
      shell: bash
      run: dotnet tool install --global GitVersion.Tool

    - name: "GitVersion"
      shell: bash
      id: gitversion
      run: |
        cd ${{ inputs.gitversion-working-directory }}
        VERSION=$(dotnet-gitversion /config ${{ inputs.gitversion-config-file-path }} /output json /showvariable NuGetVersionV2)
        "::set-output name=version::$VERSION"

    - name: "Clean solution"
      shell: bash
      run: dotnet clean ${{ inputs.solution-or-project }} --verbosity quiet --configuration Release && dotnet nuget locals all --clear

    - name: "Build solution"
      shell: bash
      run: dotnet build ${{ inputs.solution-or-project }} --nologo --verbosity minimal --configuration Release -p:Version='${{ steps.gitversion.outputs.version }}'

    - name: "Test solution"
      shell: bash
      run: dotnet test ${{ inputs.solution-or-project }} --nologo --verbosity minimal --configuration Release --no-build

    - name: "Pack solution"
      if: inputs.is-enabled-pack == 'true'
      shell: bash
      run: dotnet pack ${{ inputs.solution-or-project }} --nologo --verbosity minimal --configuration Release --no-build -p:PackageVersion='${{ steps.gitversion.outputs.version }}'

    - name: "Staging"
      if: inputs.is-enabled-pack == 'true' && inputs.upload-myget-org == 'true'
      shell: bash
      run: |
        echo "NUGET_SOURCE_URL=https://www.myget.org/F/bottlenoselabs/api/v3/index.json" >> $GITHUB_ENV
        echo "NUGET_ACCESS_TOKEN=${{ inputs.myget-access-token }}" >> $GITHUB_ENV

    - name: "Release"
      if: inputs.is-enabled-pack == 'true' && inputs.upload-nuget-org == 'true'
      shell: bash
      run: |
        echo "NUGET_SOURCE_URL=https://api.nuget.org/v3/index.json" >> $GITHUB_ENV
        echo "NUGET_ACCESS_TOKEN=${{ inputs.nuget-access-token }}" >> $GITHUB_ENV

    - name: "Upload Packages"
      if: inputs.is-enabled-pack == 'true' && (inputs.upload-nuget-org == 'true' || inputs.upload-myget-org == 'true') 
      shell: bash
      run: dotnet nuget push "./**/*.nupkg" --source $NUGET_SOURCE_URL --skip-duplicate --api-key $NUGET_ACCESS_TOKEN